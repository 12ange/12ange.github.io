<!DOCTYPE html>
<html lang="ja">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width,minimum-scale=1">
<title>WebSpeechAPIで音声認識：音声→文章の変換結果を返す</title>
<style>
#tapzone{ width: 75%; min-height: 3em; border: 3px ridge silver;}
#results{ width: 75%; line-height: 1.25em; border: 1px dotted black; margin-top: 1em;}
</style>
</head>
<body>
<h2>WebSpeechAPIで音声認識：音声→文章の変換結果を返す</h2>
<p>使用可否の参考：<a href="https://caniuse.com/#feat=speech-recognition">Can I use | Speech Recognition API</a></p>
<p><select id="selectLang"></select> の音声認識練習用例文 &gt;&gt; <span id="spanShout"></span></p>
<div id="tapzone">開始・終了はこのエリアをTAP</div>
<div id="results">結果はここに表示(毎回上書き)</div>
<script>
"use strict";
const NEW_TAG = tag => document.createElement(tag);
const GET_ID = id => document.getElementById(id);

//言語とオススメ口に出したい例文(?)まとめ
const listLang = [
	{tag:"ja",name:"日本語"    ,shout:"魔術師手術修行中"},
	{tag:"en",name:"英語"      ,shout:"Supercalifragilisticexpialidocious"},
	{tag:"fr",name:"フランス語",shout:"Il offre sa confiance et son amour."},
	{tag:"it",name:"イタリア語",shout:"(なし)"},
	{tag:"es",name:"スペイン語",shout:"(なし)"},
	{tag:"zh",name:"中国語"    ,shout:"(なし)"},
	{tag:"ko",name:"韓国語"    ,shout:"(なし)"}
];

/*** Chromeではオンライン・HTTPS必須 ***/
/*** FireFoxではブラウザ側での設定必須 ***/
const xSpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
//const xSpeechGrammarList = window.SpeechGrammarList || window.webkitSpeechGrammarList;
//20180611:文法については英語でも挙動が変なので(文法外でも認識する)、保留。
//const xSpeechRecognitionEvent = window.SpeechRecognitionEvent || window.webkitSpeechRecognitionEvent;

let timeRecognizing = 0 , isRecognizing = false;

let wsrecog = new xSpeechRecognition();

//認識選択肢の最大数を変更。初期値は 1 。多いと拾いやすそう。
wsrecog.maxAlternatives = 99;
//20180611:Chromeデフォルトだと、増やしてもconfidenceはAlt#0番以外は0になるらしい(bug?)

wsrecog.addEventListener("result", _event=>{
	//音声認識結果イベント。型は xSpeechRecognitionEvent
	//.result は認識結果リスト。
	//.result.lengthが結果件数
	//.result[N] は認識結果。
	//.result[N].isFinal が認識処理完了フラグ
	//.result[N].length が認識選択肢 alternative の数
	//.result[N][M] が認識選択肢。
	//.result[N][M].transcript が認識結果文
	//.result[N][M].confidence が信頼度
	const rcgnList = _event.results;
	let textResult = `[OK] 認識結果 ${rcgnList.length}件<br>`;
	for(let i=0; i<rcgnList.length; i++){
		let altntvs = rcgnList[i];
		textResult += `結果#${i+1}, 選択肢 ${altntvs.length}個&gt;<br>`;
		for(let j=0; j<altntvs.length; j++){
			textResult += `その${j+1}; ${altntvs[j].transcript} (${100*altntvs[j].confidence}%)<br>`;
		}
		textResult += `&lt;結果#${i+1}<br>`;
	}
	GET_ID("results").innerHTML = textResult;
	//console.log(_event.results);
});

wsrecog.addEventListener("nomatch", _event=>{
	//音声認識不能イベント。型は xSpeechRecognitionEvent
	//語彙を与える形の場合か？
	GET_ID("results").textContent = "[NO MATCH] "+_event.results.length;
	//console.log("nomatch");
	//console.log(_event.results);
});
wsrecog.addEventListener("error", _event=>{
	//_event.errorに理由の文字列。型は xSpeechRecognitionError
	GET_ID("results").textContent = `[ERROR] ${_event.error} / ${_event.message}`;
	//console.log(`error: ${_event.error} / ${_event.message}`);
});

//各種タイミングイベント
//start~end 音声認識受付開始~終了
//audiostart~audioend 音声収録開始~終了
//soundstart~soundend 何らかの音の入力を検知~終了
//speechstart~speechend 認識できそうな音の入力を検知~終了
wsrecog.addEventListener("start", ()=>{
	isRecognizing = true;
	timeRecognizing = Date.now();
	GET_ID("tapzone").textContent = "<onStart>";
});
wsrecog.addEventListener("end", ()=>{
	isRecognizing = false;
	GET_ID("tapzone").textContent += `<onEnd=${Date.now()-timeRecognizing}ms> TAPでもう一度`;
});
wsrecog.addEventListener("audiostart", ()=>{
	GET_ID("tapzone").textContent += `<onAudioStart=${Date.now()-timeRecognizing}ms>`;
});
wsrecog.addEventListener("audioend", ()=>{
	GET_ID("tapzone").textContent += `<onAudioEnd=${Date.now()-timeRecognizing}ms>`;
});
wsrecog.addEventListener("soundstart", ()=>{
	GET_ID("tapzone").textContent += `<onSoundStart=${Date.now()-timeRecognizing}ms>`;
});
wsrecog.addEventListener("soundend", ()=>{
	GET_ID("tapzone").textContent += `<onSoundEnd=${Date.now()-timeRecognizing}ms>`;
});
wsrecog.addEventListener("speechstart", ()=>{
	GET_ID("tapzone").textContent += `<onSpeechStart=${Date.now()-timeRecognizing}ms>`;
});
wsrecog.addEventListener("speechend", ()=>{
	GET_ID("tapzone").textContent += `<onSpeechEnd=${Date.now()-timeRecognizing}ms>`;
});



//認識させる言語の選択
(_eSelect=>{
	for( let oLang of listLang ){
		_eSelect.add( new Option(oLang.name, oLang.tag) );
	}
	_eSelect.selectedIndex = 0;

	_eSelect.addEventListener("change",e=>{
		let i = e.target.selectedIndex;
		GET_ID("spanShout").textContent=listLang[i].shout;

		//認識に使う言語。これと違う言語で話しかけるとものの見事にとっちらかるｗ
		wsrecog.lang = e.target.value;
	});
	_eSelect.dispatchEvent( new Event("change") )

})( GET_ID("selectLang") )

//エリアがタップされたら音声認識開始/停止。
GET_ID("tapzone").addEventListener("click",()=>{
	//console.log(`tapped-lang: ${wsrecog.lang}`)
	if(isRecognizing){wsrecog.stop()}else{wsrecog.start()}
});

</script>
</body>
</html>
