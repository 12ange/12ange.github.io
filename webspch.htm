<!DOCTYPE html>
<html lang="ja">
<head>
<meta charset="utf-8">
<title>NEWHTMLFILE</title>
<style>
#tapzone{ width: 75%; height: 3em; border: 3px ridge silver;}
#results{ width: 75%; line-height: 1.25em; border: 1px dotted black; margin-top: 1em;}
</style>
</head>
<body>
<h1>Try WebSpeechAPI/Recognition</h1>
<div id="tapzone">tap to start/end</div>
<div id="results"></div>
<script>
"use strict";
const NEW_TAG = tag => document.createElement(tag);
const GET_ID = id => document.getElementById(id);

/*** Chromeではオンライン・HTTPS必須 ***/
/*** FireFoxではブラウザ側での設定必須 ***/
const xSpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
const xSpeechGrammarList = window.SpeechGrammarList || window.webkitSpeechGrammarList;
const xSpeechRecognitionEvent = window.SpeechRecognitionEvent || window.webkitSpeechRecognitionEvent;

let timeRecognizing = 0 , isRecognizing = false;

let wsrecog = new xSpeechRecognition();
wsrecog.lang = "ja"; //ja:日本語。ということはen:英語もある？

wsrecog.addEventListener("result", evt=>{
	//音声認識結果イベント。型は xSpeechRecognitionEvent
	//.result は認識結果リスト。
	//.result.lengthが結果件数
	//.result[N] は認識結果。
	//.result[N].isFinal が認識処理完了フラグ
	//.result[N].length が認識選択肢 alternative の数
	//.result[N][M] が認識選択肢。
	//.result[N][M].transcript が認識結果文
	//.result[N][M].confidence が信頼度
	let textResult = `[OK] ${evt.results.length} results.\n`;
	for(let i=0; i<evt.results.length; i++){
		textResult += `result#${i+1}, has ${evt.results[i].length} alternate(s).>\n`;
		for(let j=0; j<evt.results[i].length; j++){
			textResult += `#${j+1}> ${result[i][j].transcript} (${100*result[i][j].confidence}%)\n`;
		}
		textResult += `<result#${i+1}>\n`;
	}
	GET_ID("results").textContent = textResult;
	//console.log(evt.results);
});

wsrecog.addEventListener("nomatch", evt=>{
	//音声認識不能イベント。型は xSpeechRecognitionEvent
	//語彙を与える形の場合か？
	GET_ID("results").textContent = "[NO MATCH] "+evt.results.length;
	console.log(evt);
});
wsrecog.addEventListener("error", evt=>{
	//evt.errorに理由の文字列。型は SpeechRecognitionError
	console.log(evt.error);
	GET_ID("results").textContent = "[ERROR] "+evt.error;
});

//各種タイミングイベント
//start~end 音声認識受付開始~終了
//audiostart~audioend 音声収録開始~終了
//soundstart~soundend 何らかの音の入力を検知~終了
//speechstart~speechend 認識できそうな音の入力を検知~終了
wsrecog.addEventListener("start", ()=>{
	isRecognizing = true;
	timeRecognizing = Date.now();
	GET_ID("tapzone").textContent = "<onStart>";
});
wsrecog.addEventListener("end", ()=>{
	isRecognizing = false;
	GET_ID("tapzone").textContent += `<onEnd=${Date.now()-timeRecognizing}ms>`;
});
wsrecog.addEventListener("audiostart", ()=>{
	GET_ID("tapzone").textContent += `<onAudioStart=${Date.now()-timeRecognizing}ms>`;
});
wsrecog.addEventListener("audioend", ()=>{
	GET_ID("tapzone").textContent += `<onAudioEnd=${Date.now()-timeRecognizing}ms>`;
});
wsrecog.addEventListener("soundstart", ()=>{
	GET_ID("tapzone").textContent += `<onSoundStart=${Date.now()-timeRecognizing}ms>`;
});
wsrecog.addEventListener("soundend", ()=>{
	GET_ID("tapzone").textContent += `<onSoundEnd=${Date.now()-timeRecognizing}ms>`;
});
wsrecog.addEventListener("speechstart", ()=>{
	GET_ID("tapzone").textContent += `<onSpeechStart=${Date.now()-timeRecognizing}ms>`;
});
wsrecog.addEventListener("speechend", ()=>{
	GET_ID("tapzone").textContent += `<onSpeechEnd=${Date.now()-timeRecognizing}ms>`;
});

//エリアがタップされたら音声認識開始/停止。
GET_ID("tapzone").addEventListener("click",()=>{
	if(isRecognizing){wsrecog.stop()}else{wsrecog.start()}
});

</script>
</body>
</html>