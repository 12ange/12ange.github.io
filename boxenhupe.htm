<!DOCTYPE html>
<html lang="ja">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width,minimum-scale=1">
<title>＜))) ポヨヨヨヨヨヨヨ</title>
<style>
.pseudobutton{
	border:.5em outset #ddd;
	background-color:#ccc;
	height:50vmin;
	margin:auto;
	padding:.5em;
	user-select:none;-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none;
	text-align:center;
	width:50vmin;
}
.pseudobutton>div{
	display:inline-flex;
	justify-content:center;
	align-items:center;
	height:100%;
	width:100%;
	pointer-events:none;
}
.pseudobutton.down{
	border-style:inset;
	border-color:#9f9;
	background-color:#bfb;
}
</style>
</head>
<body>
<h1>BOXENHUPE NÜRBURGRING</h1>
<h3>ニュル24h視聴中に時折聞こえる、競技車両がピットレーンに入ってきたときの警告音</h3>
<div class="pseudobutton">
	<div>
		<span>＜))) ポヨヨヨヨヨヨヨ</span>
	</div>
</div>
<!--
公式 https://www.nuerburgring.de/en/fans-info/interactive/downloads/mobile-handy.html
-->
<!--
<fieldset>
	<legend>オプション</legend>
	<ul>
		<li>基底周波数 880 Hz</li>
		<li>detune周波数 7 Hz</li>
		<li>detune振幅 ± 125 cent</li>
	</ul>
</fieldset>
-->
<script>
"use strict";
const divHooter = document.getElementsByClassName("pseudobutton")[0],
      gAudioCtx = new (window.AudioContext || window.webkitAudioContext)();
let oscMain=null, oscDet=null, isPreplay=true, isPlaying=false;

function startHooter(e){
	if(isPreplay){
		gAudioCtx.resume();
		isPreplay=false;
	}
	if(isPlaying){return} //再生中なら無視

	//生成
	oscMain = gAudioCtx.createOscillator();
	oscDet = gAudioCtx.createOscillator();
	let gain = gAudioCtx.createGain()

	oscMain.frequency.value = 880;
	gain.gain.value = 125;
	oscDet.frequency.value = 7;
	/*
	  + 基底周波数は多分合ってる。
	  ++ 基底波形は通りの良いsineがオススメだが、本物に近づけたいならcustomで(パラメタは正弦波を方形波に近づける感じだと思う)。
	  + detune周波数は7~7.5?(よくわからん、8だとちょっと速く感じる)。
	  + detune振動幅は大きくするとより気を引けるがやり過ぎる(300centあたり?)と警察っぽくなるので難しい。
	*/

	//接続
	oscMain.connect(gAudioCtx.destination);
	oscDet.connect(gain).connect(oscMain.detune);
	//鳴動
	oscMain.start();
	oscDet.start();
	isPlaying=true;

	divHooter.classList.add("down");
}
function stopHooter(e){
	if(!isPlaying){return}
	isPlaying=false;
	//鳴動中ならソースとなるオシレータを把握しているから、止めてバラして解放する
	oscMain.stop();
	oscMain.disconnect();
	oscMain = null;
	oscDet.stop();
	oscDet.disconnect();
	oscDet = null;

	divHooter.classList.remove("down");
}

//マウスの場合
divHooter.addEventListener("mousedown",startHooter);
divHooter.addEventListener("mouseup",stopHooter);
divHooter.addEventListener("mouseleave",stopHooter);
//タッチパネルの場合
divHooter.addEventListener("touchstart",startHooter);
divHooter.addEventListener("touchend",stopHooter);
divHooter.addEventListener("touchcancel",stopHooter);

</script>
</body>
</html>
